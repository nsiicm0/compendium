{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"#code","title":"Code","text":"<pre><code>import os\n\nprint('Hello World')\n</code></pre> <p>Note</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"data_structures/","title":"Data Structures","text":""},{"location":"data_structures/#linked-lists","title":"Linked Lists","text":""},{"location":"data_structures/#single-linked-list","title":"Single-linked list","text":""},{"location":"data_structures/#definition","title":"Definition","text":"<pre><code>class ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n</code></pre>"},{"location":"data_structures/#cycle-detection","title":"Cycle Detection","text":"IntuitionAlgorithm <p>The Floyd Algorithm aka Slow Fast Algorithm solves this problem.</p> <ol> <li>We use two pointers in the linked list.</li> <li>We traverse the linked list with both of the pointers.</li> <li>The first pointer advances two steps each time, and the other one step. They advance alternating.</li> <li>If at any point the \"slower\" pointer is in the next two fields of the \"faster\" pointer, the linked list has a cycle.</li> <li>Otherwise if the \"faster\" reaches the end of the linked list (next is empty), then there is no cycle.</li> </ol> <pre><code>def hasCycle(self, head: Optional[ListNode]) -&gt; bool:\n    if head is None:\n        return False\n    slow = head\n    fast = head\n    while True:\n        # advance fast 2 steps\n        if fast.next is not None:\n            if fast.next == slow:\n                return True\n            if fast.next.next is not None:\n                if fast.next.next == slow:\n                    return True\n                fast = fast.next.next\n            else:\n                return False\n        else:\n            return False\n        # advance slow 1 step\n        if slow.next is not None:\n            slow = slow.next\n        else:\n            # unlikely case\n            return False\n</code></pre>"},{"location":"data_structures/#trees","title":"Trees","text":""},{"location":"data_structures/#binary-tree","title":"Binary Tree","text":""},{"location":"data_structures/#definition_1","title":"Definition","text":"<pre><code>class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n</code></pre>"},{"location":"data_structures/#find-max-depth","title":"Find max depth","text":"IntuitionAlgorithm <ul> <li>Use recursion to recursively go down each branch of the tree.</li> <li>In each iteration increase by one.</li> <li>Compare both sides at the top and take the larger sum of paths.</li> </ul> <pre><code>def maxDepth(root: Optional[TreeNode]) -&gt; int:\n    return 0 if root is None else max(self.maxDepth(root.left), self.maxDepth(root.right)) + 1\n</code></pre>"},{"location":"links/","title":"Links","text":"Link Description Algorithm Visualizer Extensive visualization tool for algorithms."},{"location":"math/","title":"Math","text":""},{"location":"math/#get-digits-of-a-number","title":"Get digits of a number","text":"IntuitionAlgorithm <ol> <li>Use modulo 10 to extract last digit</li> <li>Update <code>n</code> by subtracting last digit</li> <li>Divide <code>n</code> by 10 (shifts penultimate digit to last)</li> <li>Repeat until <code>n</code> = 0</li> </ol> <pre><code>n = 123\ndigits = []\nwhile True:\n    remainder = n % 10\n    digits.append(remainder)\n    n -= remainder\n    if n == 0:\n        break\n    n = n // 10\n# digits: [1, 2, 3]\n</code></pre>"},{"location":"math/#check-if-a-palindrome","title":"Check if a Palindrome","text":"IntuitionAlgorithm <p>Note</p> <p>An integer is a palindrome when it reads the same forward and backward.</p> <p>Intuition is based on getting the digits of a number. Albeit one could also use string representation of a number.</p> <ol> <li>Use modulo 10 to extract last digit. Add to <code>reverse</code> (initially 0)</li> <li>Update <code>n</code> by subtracting last digit</li> <li>Divide <code>n</code> by 10 (shifts penultimate digit to last), multiply <code>reverse</code> by 10.</li> <li>Repeat until <code>n</code> = 0</li> <li>If reverse equal original n then n is palindrome.</li> </ol> <pre><code>def isPalindrome(x: int) -&gt; bool:\n    if x &lt; 0:\n        return False\n    n = x\n    reverse = 0\n    while x &gt; 0:\n        remainder = x % 10\n        reverse = (reverse * 10) + remainder\n        x = x // 10\n    return n == reverse\n</code></pre>"},{"location":"math/#happy-number","title":"Happy Number","text":"IntuitionAlgorithm <p>A happy number is a number defined by the following process:</p> <ul> <li>Starting with any positive integer, replace the number by the sum of the squares of its digits.</li> <li>Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.</li> <li>Those numbers for which this process ends in 1 are happy.</li> </ul> <pre><code>def isHappy(n: int) -&gt; bool:\n    if n &lt; 0:\n        return False\n    previous = []\n    while True:\n        val = n\n        digits = []\n        while True:\n            remainder = val % 10\n            digits.append(remainder ** 2)\n            val -= remainder\n            if val == 0:\n                break\n            val = val // 10\n        n = sum(digits)\n        if n == 1:\n            return True\n        elif n in previous:\n            return False\n        previous.append(n)\n    return False\n</code></pre>"},{"location":"blog/","title":"Blog","text":""}]}